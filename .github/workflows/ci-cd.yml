name: "CI/CD Pipeline - TodoList API"

# 觸發條件
on:
  push:
    branches:
      - main
      - develop
      - "feature/*"
  pull_request:
    branches:
      - main
      - develop

# 環境變數
env:
  DOTNET_VERSION: "8.0.x"
  NODE_VERSION: "18"
  DOCKER_REGISTRY: "ghcr.io"
  IMAGE_NAME: "todolist-api"

jobs:
  # 程式碼品質檢查
  code-quality:
    name: "程式碼品質檢查"
    runs-on: ubuntu-latest

    steps:
      - name: "檢出程式碼"
        uses: actions/checkout@v4

      - name: "設定 .NET SDK"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "快取 NuGet 套件"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "還原 NuGet 套件"
        run: dotnet restore

      - name: "程式碼格式檢查"
        run: dotnet format --verify-no-changes --verbosity diagnostic
        continue-on-error: true

      - name: "程式碼分析"
        run: dotnet build --no-restore --configuration Release --verbosity normal

  # 單元測試
  test:
    name: "單元測試"
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: todolist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: "檢出程式碼"
        uses: actions/checkout@v4

      - name: "設定 .NET SDK"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "還原套件"
        run: dotnet restore

      - name: "建構應用程式"
        run: dotnet build --no-restore --configuration Release

      - name: "執行測試"
        run: dotnet test --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage"
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=todolist_test;Username=postgres;Password=test123"

      - name: "上傳測試結果"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: "**/*.trx"

      - name: "上傳覆蓋率報告"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: "**/*.cobertura.xml"

  # 安全性掃描
  security-scan:
    name: "安全性掃描"
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: "檢出程式碼"
        uses: actions/checkout@v4

      - name: "設定 .NET SDK"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "安裝安全性掃描工具"
        run: dotnet tool install --global security-scan
        continue-on-error: true

      - name: "執行依賴性掃描"
        run: dotnet list package --vulnerable --include-transitive
        continue-on-error: true

  # Docker 映像檔建構
  build-docker:
    name: "Docker 映像檔建構"
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: "檢出程式碼"
        uses: actions/checkout@v4

      - name: "設定 Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "登入 GitHub Container Registry"
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "提取映像檔 metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: "建構並推送 Docker 映像檔"
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 部署到開發環境
  deploy-dev:
    name: "部署到開發環境"
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: "檢出程式碼"
        uses: actions/checkout@v4

      - name: "部署到開發環境"
        run: |
          echo "部署到開發環境"
          echo "映像檔: ${{ needs.build-docker.outputs.image-tag }}"
          # 這裡可以加入實際的部署邏輯
          # 例如：kubectl、docker-compose、Azure CLI 等

  # 部署到生產環境
  deploy-prod:
    name: "部署到生產環境"
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: "檢出程式碼"
        uses: actions/checkout@v4

      - name: "部署到生產環境"
        run: |
          echo "部署到生產環境"
          echo "映像檔: ${{ needs.build-docker.outputs.image-tag }}"
          # 這裡可以加入實際的部署邏輯

  # 通知
  notify:
    name: "部署通知"
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
      - name: "發送部署通知"
        run: |
          if [ "${{ needs.deploy-dev.result }}" == "success" ] || [ "${{ needs.deploy-prod.result }}" == "success" ]; then
            echo "部署成功！"
          else
            echo "部署失敗或跳過"
          fi
